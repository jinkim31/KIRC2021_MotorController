
MotorController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003384  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003778  08003778  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003780  08003780  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  2000000c  08003794  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08003794  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2a2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230f  00000000  00000000  0002a2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002cfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023932  00000000  00000000  0002d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3f2  00000000  00000000  000511b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3434  00000000  00000000  0005c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f9d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c0  00000000  00000000  0012fa2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003530 	.word	0x08003530

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003530 	.word	0x08003530

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <__NVIC_GetPriorityGrouping+0x18>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	0a1b      	lsrs	r3, r3, #8
 8000506:	f003 0307 	and.w	r3, r3, #7
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0b      	blt.n	8000542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <__NVIC_EnableIRQ+0x38>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000e100 	.word	0xe000e100

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	; (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	; (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	; 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
	...

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_DMA_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <MX_DMA_Init+0x4c>)
 8000620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_DMA_Init+0x4c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000632:	f7ff ff63 	bl	80004fc <__NVIC_GetPriorityGrouping>
 8000636:	4603      	mov	r3, r0
 8000638:	2200      	movs	r2, #0
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffb3 	bl	80005a8 <NVIC_EncodePriority>
 8000642:	4603      	mov	r3, r0
 8000644:	4619      	mov	r1, r3
 8000646:	200c      	movs	r0, #12
 8000648:	f7ff ff84 	bl	8000554 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800064c:	200c      	movs	r0, #12
 800064e:	f7ff ff63 	bl	8000518 <__NVIC_EnableIRQ>

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <MX_GPIO_Init+0xd0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <MX_GPIO_Init+0xd0>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_GPIO_Init+0xd0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_GPIO_Init+0xd0>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a10      	ldr	r2, [pc, #64]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2104      	movs	r1, #4
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_GPIO_Init+0xd4>)
 8000708:	f001 f8d8 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800070c:	2304      	movs	r3, #4
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0xd4>)
 8000724:	f000 ff36 	bl	8001594 <HAL_GPIO_Init>

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020c00 	.word	0x40020c00

08000738 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	330c      	adds	r3, #12
 8000744:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	e853 3f00 	ldrex	r3, [r3]
 800074c:	60bb      	str	r3, [r7, #8]
   return(result);
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	330c      	adds	r3, #12
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	61ba      	str	r2, [r7, #24]
 800075e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000760:	6979      	ldr	r1, [r7, #20]
 8000762:	69ba      	ldr	r2, [r7, #24]
 8000764:	e841 2300 	strex	r3, r2, [r1]
 8000768:	613b      	str	r3, [r7, #16]
   return(result);
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1e7      	bne.n	8000740 <LL_USART_EnableIT_IDLE+0x8>
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800077e:	b480      	push	{r7}
 8000780:	b089      	sub	sp, #36	; 0x24
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3314      	adds	r3, #20
 800078a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	e853 3f00 	ldrex	r3, [r3]
 8000792:	60bb      	str	r3, [r7, #8]
   return(result);
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3314      	adds	r3, #20
 80007a0:	69fa      	ldr	r2, [r7, #28]
 80007a2:	61ba      	str	r2, [r7, #24]
 80007a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007a6:	6979      	ldr	r1, [r7, #20]
 80007a8:	69ba      	ldr	r2, [r7, #24]
 80007aa:	e841 2300 	strex	r3, r2, [r1]
 80007ae:	613b      	str	r3, [r7, #16]
   return(result);
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1e7      	bne.n	8000786 <LL_USART_EnableDMAReq_RX+0x8>
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3724      	adds	r7, #36	; 0x24
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <LL_DMA_EnableStream+0x3c>)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4908      	ldr	r1, [pc, #32]	; (8000800 <LL_DMA_EnableStream+0x3c>)
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	440a      	add	r2, r1
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	4611      	mov	r1, r2
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	440a      	add	r2, r1
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6013      	str	r3, [r2, #0]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	08003748 	.word	0x08003748

08000804 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <LL_DMA_SetDataLength+0x44>)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	0c1b      	lsrs	r3, r3, #16
 8000822:	041b      	lsls	r3, r3, #16
 8000824:	4908      	ldr	r1, [pc, #32]	; (8000848 <LL_DMA_SetDataLength+0x44>)
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	440a      	add	r2, r1
 800082a:	7812      	ldrb	r2, [r2, #0]
 800082c:	4611      	mov	r1, r2
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	440a      	add	r2, r1
 8000832:	4611      	mov	r1, r2
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4313      	orrs	r3, r2
 8000838:	604b      	str	r3, [r1, #4]
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	08003748 	.word	0x08003748

0800084c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <LL_DMA_SetMemoryAddress+0x2c>)
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	461a      	mov	r2, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	08003748 	.word	0x08003748

0800087c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <LL_DMA_SetPeriphAddress+0x2c>)
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4413      	add	r3, r2
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6093      	str	r3, [r2, #8]
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	08003748 	.word	0x08003748

080008ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b2:	f000 fd17 	bl	80012e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  //initSerialLine(&serialLine, 1, (uint8_t*)&fc, sizeof(fc), USART3);
  initSerialLine(&serialLine, 2, (uint8_t*)&tc, sizeof(tc), USART3);
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <main+0x6c>)
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2330      	movs	r3, #48	; 0x30
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <main+0x70>)
 80008be:	2102      	movs	r1, #2
 80008c0:	4817      	ldr	r0, [pc, #92]	; (8000920 <main+0x74>)
 80008c2:	f002 fabb 	bl	8002e3c <initSerialLine>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f835 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f7ff fec9 	bl	8000660 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ce:	f7ff fe9f 	bl	8000610 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008d2:	f000 fc33 	bl	800113c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)rxBuffer);
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <main+0x78>)
 80008d8:	461a      	mov	r2, r3
 80008da:	2101      	movs	r1, #1
 80008dc:	4812      	ldr	r0, [pc, #72]	; (8000928 <main+0x7c>)
 80008de:	f7ff ffb5 	bl	800084c <LL_DMA_SetMemoryAddress>
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)&USART3->DR);
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <main+0x80>)
 80008e4:	2101      	movs	r1, #1
 80008e6:	4810      	ldr	r0, [pc, #64]	; (8000928 <main+0x7c>)
 80008e8:	f7ff ffc8 	bl	800087c <LL_DMA_SetPeriphAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, RX_BUFFER_SIZE);
 80008ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008f0:	2101      	movs	r1, #1
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <main+0x7c>)
 80008f4:	f7ff ff86 	bl	8000804 <LL_DMA_SetDataLength>
  LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 80008f8:	2101      	movs	r1, #1
 80008fa:	480b      	ldr	r0, [pc, #44]	; (8000928 <main+0x7c>)
 80008fc:	f7ff ff62 	bl	80007c4 <LL_DMA_EnableStream>
  LL_USART_EnableDMAReq_RX(USART3);
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <main+0x6c>)
 8000902:	f7ff ff3c 	bl	800077e <LL_USART_EnableDMAReq_RX>
  LL_USART_EnableIT_IDLE(USART3);
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <main+0x6c>)
 8000908:	f7ff ff16 	bl	8000738 <LL_USART_EnableIT_IDLE>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cnt++;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <main+0x84>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	3301      	adds	r3, #1
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <main+0x84>)
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e7f9      	b.n	800090c <main+0x60>
 8000918:	40004800 	.word	0x40004800
 800091c:	200002b8 	.word	0x200002b8
 8000920:	2000002c 	.word	0x2000002c
 8000924:	200002ec 	.word	0x200002ec
 8000928:	40026000 	.word	0x40026000
 800092c:	40004804 	.word	0x40004804
 8000930:	20000028 	.word	0x20000028

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	; 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2234      	movs	r2, #52	; 0x34
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fdec 	bl	8003520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <SystemClock_Config+0xdc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <SystemClock_Config+0xdc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <SystemClock_Config+0xdc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <SystemClock_Config+0xe0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <SystemClock_Config+0xe0>)
 800097e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SystemClock_Config+0xe0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2310      	movs	r3, #16
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a4:	2308      	movs	r3, #8
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009a8:	23b4      	movs	r3, #180	; 0xb4
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fa43 	bl	8001e48 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c8:	f000 f826 	bl	8000a18 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009cc:	f000 ffaa 	bl	8001924 <HAL_PWREx_EnableOverDrive>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009d6:	f000 f81f 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2105      	movs	r1, #5
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 ffe3 	bl	80019c4 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a04:	f000 f808 	bl	8000a18 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3750      	adds	r7, #80	; 0x50
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <LL_USART_IsActiveFlag_ORE>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	bf0c      	ite	eq
 8000a88:	2301      	moveq	r3, #1
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_USART_IsActiveFlag_IDLE>:
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b10      	cmp	r3, #16
 8000aac:	bf0c      	ite	eq
 8000aae:	2301      	moveq	r3, #1
 8000ab0:	2300      	movne	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_USART_ClearFlag_ORE>:
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000ace:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_USART_ClearFlag_IDLE>:
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000af2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <LL_DMA_EnableStream>:
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <LL_DMA_EnableStream+0x3c>)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <LL_DMA_EnableStream+0x3c>)
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	440a      	add	r2, r1
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	440a      	add	r2, r1
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	08003750 	.word	0x08003750

08000b48 <LL_DMA_DisableStream>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <LL_DMA_DisableStream+0x3c>)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <LL_DMA_DisableStream+0x3c>)
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	440a      	add	r2, r1
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	440a      	add	r2, r1
 8000b70:	f023 0301 	bic.w	r3, r3, #1
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	08003750 	.word	0x08003750

08000b88 <LL_DMA_SetDataLength>:
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LL_DMA_SetDataLength+0x44>)
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	0c1b      	lsrs	r3, r3, #16
 8000ba6:	041b      	lsls	r3, r3, #16
 8000ba8:	4908      	ldr	r1, [pc, #32]	; (8000bcc <LL_DMA_SetDataLength+0x44>)
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	440a      	add	r2, r1
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	440a      	add	r2, r1
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	604b      	str	r3, [r1, #4]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	08003750 	.word	0x08003750

08000bd0 <LL_DMA_GetDataLength>:
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT));
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <LL_DMA_GetDataLength+0x28>)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	b29b      	uxth	r3, r3
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	08003750 	.word	0x08003750

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 fb9e 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (LL_USART_IsActiveFlag_IDLE(USART3))
 8000c66:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <USART3_IRQHandler+0x68>)
 8000c68:	f7ff ff17 	bl	8000a9a <LL_USART_IsActiveFlag_IDLE>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d01d      	beq.n	8000cae <USART3_IRQHandler+0x4e>
	{
		int len = RX_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_STREAM_1);
 8000c72:	2101      	movs	r1, #1
 8000c74:	4815      	ldr	r0, [pc, #84]	; (8000ccc <USART3_IRQHandler+0x6c>)
 8000c76:	f7ff ffab 	bl	8000bd0 <LL_DMA_GetDataLength>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8000c80:	607b      	str	r3, [r7, #4]
		pushPacket(&serialLine, rxBuffer, len);
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	4912      	ldr	r1, [pc, #72]	; (8000cd0 <USART3_IRQHandler+0x70>)
 8000c86:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <USART3_IRQHandler+0x74>)
 8000c88:	f002 f900 	bl	8002e8c <pushPacket>
		LL_USART_ClearFlag_IDLE(USART3);
 8000c8c:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <USART3_IRQHandler+0x68>)
 8000c8e:	f7ff ff29 	bl	8000ae4 <LL_USART_ClearFlag_IDLE>
		LL_DMA_DisableStream(DMA1, LL_DMA_STREAM_1);
 8000c92:	2101      	movs	r1, #1
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <USART3_IRQHandler+0x6c>)
 8000c96:	f7ff ff57 	bl	8000b48 <LL_DMA_DisableStream>
		LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, RX_BUFFER_SIZE);
 8000c9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	480a      	ldr	r0, [pc, #40]	; (8000ccc <USART3_IRQHandler+0x6c>)
 8000ca2:	f7ff ff71 	bl	8000b88 <LL_DMA_SetDataLength>
		LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <USART3_IRQHandler+0x6c>)
 8000caa:	f7ff ff2d 	bl	8000b08 <LL_DMA_EnableStream>
	}

	if (LL_USART_IsActiveFlag_ORE(USART3)) LL_USART_ClearFlag_ORE(USART3);
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <USART3_IRQHandler+0x68>)
 8000cb0:	f7ff fee0 	bl	8000a74 <LL_USART_IsActiveFlag_ORE>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <USART3_IRQHandler+0x60>
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <USART3_IRQHandler+0x68>)
 8000cbc:	f7ff ff00 	bl	8000ac0 <LL_USART_ClearFlag_ORE>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40004800 	.word	0x40004800
 8000ccc:	40026000 	.word	0x40026000
 8000cd0:	200002ec 	.word	0x200002ec
 8000cd4:	2000002c 	.word	0x2000002c

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <LL_USART_Enable>:
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60da      	str	r2, [r3, #12]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_USART_ConfigAsyncMode>:
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	615a      	str	r2, [r3, #20]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40023800 	.word	0x40023800

08000e8c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40023800 	.word	0x40023800

08000ebc <LL_DMA_SetDataTransferDirection>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LL_DMA_SetDataTransferDirection+0x44>)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000edc:	4908      	ldr	r1, [pc, #32]	; (8000f00 <LL_DMA_SetDataTransferDirection+0x44>)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	440b      	add	r3, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	440b      	add	r3, r1
 8000eea:	4619      	mov	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	08003770 	.word	0x08003770

08000f04 <LL_DMA_SetMode>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LL_DMA_SetMode+0x44>)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000f24:	4908      	ldr	r1, [pc, #32]	; (8000f48 <LL_DMA_SetMode+0x44>)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	440b      	add	r3, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	440b      	add	r3, r1
 8000f32:	4619      	mov	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	08003770 	.word	0x08003770

08000f4c <LL_DMA_SetPeriphIncMode>:
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LL_DMA_SetPeriphIncMode+0x44>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <LL_DMA_SetPeriphIncMode+0x44>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	440b      	add	r3, r1
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	440b      	add	r3, r1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	08003770 	.word	0x08003770

08000f94 <LL_DMA_SetMemoryIncMode>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LL_DMA_SetMemoryIncMode+0x44>)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000fb4:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <LL_DMA_SetMemoryIncMode+0x44>)
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	440b      	add	r3, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	440b      	add	r3, r1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	08003770 	.word	0x08003770

08000fdc <LL_DMA_SetPeriphSize>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <LL_DMA_SetPeriphSize+0x44>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000ffc:	4908      	ldr	r1, [pc, #32]	; (8001020 <LL_DMA_SetPeriphSize+0x44>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	440b      	add	r3, r1
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	440b      	add	r3, r1
 800100a:	4619      	mov	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	08003770 	.word	0x08003770

08001024 <LL_DMA_SetMemorySize>:
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LL_DMA_SetMemorySize+0x44>)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001044:	4908      	ldr	r1, [pc, #32]	; (8001068 <LL_DMA_SetMemorySize+0x44>)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	440b      	add	r3, r1
 8001052:	4619      	mov	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	08003770 	.word	0x08003770

0800106c <LL_DMA_SetStreamPriorityLevel>:
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800108c:	4908      	ldr	r1, [pc, #32]	; (80010b0 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	440b      	add	r3, r1
 800109a:	4619      	mov	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	08003770 	.word	0x08003770

080010b4 <LL_DMA_SetChannelSelection>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <LL_DMA_SetChannelSelection+0x44>)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80010d4:	4908      	ldr	r1, [pc, #32]	; (80010f8 <LL_DMA_SetChannelSelection+0x44>)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	440b      	add	r3, r1
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	440b      	add	r3, r1
 80010e2:	4619      	mov	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	08003770 	.word	0x08003770

080010fc <LL_DMA_DisableFifoMode>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001106:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <LL_DMA_DisableFifoMode+0x3c>)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <LL_DMA_DisableFifoMode+0x3c>)
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	440a      	add	r2, r1
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	4611      	mov	r1, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	440a      	add	r2, r1
 8001124:	f023 0304 	bic.w	r3, r3, #4
 8001128:	6153      	str	r3, [r2, #20]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	08003770 	.word	0x08003770

0800113c <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	615a      	str	r2, [r3, #20]
 8001154:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001166:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800116a:	f7ff fe8f 	bl	8000e8c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800116e:	2004      	movs	r0, #4
 8001170:	f7ff fe74 	bl	8000e5c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001174:	2002      	movs	r0, #2
 8001176:	f7ff fe71 	bl	8000e5c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PC5   ------> USART3_RX
  PB10   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800117a:	2320      	movs	r3, #32
 800117c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800117e:	2302      	movs	r3, #2
 8001180:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800118e:	2307      	movs	r3, #7
 8001190:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4839      	ldr	r0, [pc, #228]	; (800127c <MX_USART3_UART_Init+0x140>)
 8001198:	f001 f9f9 	bl	800258e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800119c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011a2:	2302      	movs	r3, #2
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80011b2:	2307      	movs	r3, #7
 80011b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	4831      	ldr	r0, [pc, #196]	; (8001280 <MX_USART3_UART_Init+0x144>)
 80011bc:	f001 f9e7 	bl	800258e <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 80011c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c4:	2101      	movs	r1, #1
 80011c6:	482f      	ldr	r0, [pc, #188]	; (8001284 <MX_USART3_UART_Init+0x148>)
 80011c8:	f7ff ff74 	bl	80010b4 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2101      	movs	r1, #1
 80011d0:	482c      	ldr	r0, [pc, #176]	; (8001284 <MX_USART3_UART_Init+0x148>)
 80011d2:	f7ff fe73 	bl	8000ebc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2101      	movs	r1, #1
 80011da:	482a      	ldr	r0, [pc, #168]	; (8001284 <MX_USART3_UART_Init+0x148>)
 80011dc:	f7ff ff46 	bl	800106c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 80011e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e4:	2101      	movs	r1, #1
 80011e6:	4827      	ldr	r0, [pc, #156]	; (8001284 <MX_USART3_UART_Init+0x148>)
 80011e8:	f7ff fe8c 	bl	8000f04 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	4824      	ldr	r0, [pc, #144]	; (8001284 <MX_USART3_UART_Init+0x148>)
 80011f2:	f7ff feab 	bl	8000f4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	2101      	movs	r1, #1
 80011fc:	4821      	ldr	r0, [pc, #132]	; (8001284 <MX_USART3_UART_Init+0x148>)
 80011fe:	f7ff fec9 	bl	8000f94 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	481f      	ldr	r0, [pc, #124]	; (8001284 <MX_USART3_UART_Init+0x148>)
 8001208:	f7ff fee8 	bl	8000fdc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 800120c:	2200      	movs	r2, #0
 800120e:	2101      	movs	r1, #1
 8001210:	481c      	ldr	r0, [pc, #112]	; (8001284 <MX_USART3_UART_Init+0x148>)
 8001212:	f7ff ff07 	bl	8001024 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8001216:	2101      	movs	r1, #1
 8001218:	481a      	ldr	r0, [pc, #104]	; (8001284 <MX_USART3_UART_Init+0x148>)
 800121a:	f7ff ff6f 	bl	80010fc <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800121e:	f7ff fd6d 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8001222:	4603      	mov	r3, r0
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fdbd 	bl	8000da8 <NVIC_EncodePriority>
 800122e:	4603      	mov	r3, r0
 8001230:	4619      	mov	r1, r3
 8001232:	2027      	movs	r0, #39	; 0x27
 8001234:	f7ff fd8e 	bl	8000d54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001238:	2027      	movs	r0, #39	; 0x27
 800123a:	f7ff fd6d 	bl	8000d18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 1000000;
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_USART3_UART_Init+0x14c>)
 8001240:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800124e:	230c      	movs	r3, #12
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001256:	2300      	movs	r3, #0
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	480a      	ldr	r0, [pc, #40]	; (800128c <MX_USART3_UART_Init+0x150>)
 8001262:	f001 fd49 	bl	8002cf8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <MX_USART3_UART_Init+0x150>)
 8001268:	f7ff fde1 	bl	8000e2e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_USART3_UART_Init+0x150>)
 800126e:	f7ff fdce 	bl	8000e0e <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	3738      	adds	r7, #56	; 0x38
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800
 8001280:	40020400 	.word	0x40020400
 8001284:	40026000 	.word	0x40026000
 8001288:	000f4240 	.word	0x000f4240
 800128c:	40004800 	.word	0x40004800

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001296:	490e      	ldr	r1, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ac:	4c0b      	ldr	r4, [pc, #44]	; (80012dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ba:	f7ff fd0d 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f002 f8fd 	bl	80034bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff faf3 	bl	80008ac <main>
  bx  lr    
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012d4:	08003788 	.word	0x08003788
  ldr r2, =_sbss
 80012d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012dc:	2000051c 	.word	0x2000051c

080012e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_Init+0x40>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_Init+0x40>)
 80012fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_Init+0x40>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f90d 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	2000      	movs	r0, #0
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fb84 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f917 	bl	800157a <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 f8ed 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	20000008 	.word	0x20000008
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000518 	.word	0x20000518

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000518 	.word	0x20000518

080013c8 <__NVIC_SetPriorityGrouping>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_SetPriority>:
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff47 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff5c 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffb0 	bl	80014e8 <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e165      	b.n	800187c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	f040 8154 	bne.w	8001876 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d005      	beq.n	80015e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d130      	bne.n	8001648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 0201 	and.w	r2, r3, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b03      	cmp	r3, #3
 8001652:	d017      	beq.n	8001684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d123      	bne.n	80016d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	08da      	lsrs	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3208      	adds	r2, #8
 80016d2:	69b9      	ldr	r1, [r7, #24]
 80016d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80ae 	beq.w	8001876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <HAL_GPIO_Init+0x300>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a5c      	ldr	r2, [pc, #368]	; (8001894 <HAL_GPIO_Init+0x300>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b5a      	ldr	r3, [pc, #360]	; (8001894 <HAL_GPIO_Init+0x300>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001736:	4a58      	ldr	r2, [pc, #352]	; (8001898 <HAL_GPIO_Init+0x304>)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4f      	ldr	r2, [pc, #316]	; (800189c <HAL_GPIO_Init+0x308>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d025      	beq.n	80017ae <HAL_GPIO_Init+0x21a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4e      	ldr	r2, [pc, #312]	; (80018a0 <HAL_GPIO_Init+0x30c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01f      	beq.n	80017aa <HAL_GPIO_Init+0x216>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <HAL_GPIO_Init+0x310>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x212>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4c      	ldr	r2, [pc, #304]	; (80018a8 <HAL_GPIO_Init+0x314>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x20e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4b      	ldr	r2, [pc, #300]	; (80018ac <HAL_GPIO_Init+0x318>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x20a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4a      	ldr	r2, [pc, #296]	; (80018b0 <HAL_GPIO_Init+0x31c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x206>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a49      	ldr	r2, [pc, #292]	; (80018b4 <HAL_GPIO_Init+0x320>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x202>
 8001792:	2306      	movs	r3, #6
 8001794:	e00c      	b.n	80017b0 <HAL_GPIO_Init+0x21c>
 8001796:	2307      	movs	r3, #7
 8001798:	e00a      	b.n	80017b0 <HAL_GPIO_Init+0x21c>
 800179a:	2305      	movs	r3, #5
 800179c:	e008      	b.n	80017b0 <HAL_GPIO_Init+0x21c>
 800179e:	2304      	movs	r3, #4
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x21c>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e004      	b.n	80017b0 <HAL_GPIO_Init+0x21c>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_Init+0x21c>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x21c>
 80017ae:	2300      	movs	r3, #0
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f002 0203 	and.w	r2, r2, #3
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4093      	lsls	r3, r2
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c0:	4935      	ldr	r1, [pc, #212]	; (8001898 <HAL_GPIO_Init+0x304>)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <HAL_GPIO_Init+0x324>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f2:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <HAL_GPIO_Init+0x324>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017f8:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_GPIO_Init+0x324>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <HAL_GPIO_Init+0x324>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_GPIO_Init+0x324>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001846:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <HAL_GPIO_Init+0x324>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_GPIO_Init+0x324>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_GPIO_Init+0x324>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3301      	adds	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b0f      	cmp	r3, #15
 8001880:	f67f ae96 	bls.w	80015b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40013800 	.word	0x40013800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40021400 	.word	0x40021400
 80018b4:	40021800 	.word	0x40021800
 80018b8:	40013c00 	.word	0x40013c00

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d8:	e003      	b.n	80018e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	619a      	str	r2, [r3, #24]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001900:	887a      	ldrh	r2, [r7, #2]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	041a      	lsls	r2, r3, #16
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43d9      	mvns	r1, r3
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	400b      	ands	r3, r1
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800194a:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001950:	f7ff fd2e 	bl	80013b0 <HAL_GetTick>
 8001954:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001956:	e009      	b.n	800196c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001958:	f7ff fd2a 	bl	80013b0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001966:	d901      	bls.n	800196c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e01f      	b.n	80019ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_PWREx_EnableOverDrive+0x98>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d1ee      	bne.n	8001958 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001980:	f7ff fd16 	bl	80013b0 <HAL_GetTick>
 8001984:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001986:	e009      	b.n	800199c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001988:	f7ff fd12 	bl	80013b0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001996:	d901      	bls.n	800199c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e007      	b.n	80019ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_PWREx_EnableOverDrive+0x98>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019a8:	d1ee      	bne.n	8001988 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	420e0040 	.word	0x420e0040
 80019bc:	40007000 	.word	0x40007000
 80019c0:	420e0044 	.word	0x420e0044

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0cc      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d90c      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0b8      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a18:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	494d      	ldr	r1, [pc, #308]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d044      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d119      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e07f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e06f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a92:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e067      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f023 0203 	bic.w	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4934      	ldr	r1, [pc, #208]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab4:	f7ff fc7c 	bl	80013b0 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7ff fc78 	bl	80013b0 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e04f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 020c 	and.w	r2, r3, #12
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1eb      	bne.n	8001abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d20c      	bcs.n	8001b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e032      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4916      	ldr	r1, [pc, #88]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	490e      	ldr	r1, [pc, #56]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b4a:	f000 f821 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	490a      	ldr	r1, [pc, #40]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fbdc 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08003758 	.word	0x08003758
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b98:	2600      	movs	r6, #0
 8001b9a:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001b9c:	2600      	movs	r6, #0
 8001b9e:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ba8:	2600      	movs	r6, #0
 8001baa:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bac:	4ea3      	ldr	r6, [pc, #652]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bae:	68b6      	ldr	r6, [r6, #8]
 8001bb0:	f006 060c 	and.w	r6, r6, #12
 8001bb4:	2e0c      	cmp	r6, #12
 8001bb6:	f200 8137 	bhi.w	8001e28 <HAL_RCC_GetSysClockFreq+0x298>
 8001bba:	f20f 0c08 	addw	ip, pc, #8
 8001bbe:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001bc2:	bf00      	nop
 8001bc4:	08001bf9 	.word	0x08001bf9
 8001bc8:	08001e29 	.word	0x08001e29
 8001bcc:	08001e29 	.word	0x08001e29
 8001bd0:	08001e29 	.word	0x08001e29
 8001bd4:	08001bff 	.word	0x08001bff
 8001bd8:	08001e29 	.word	0x08001e29
 8001bdc:	08001e29 	.word	0x08001e29
 8001be0:	08001e29 	.word	0x08001e29
 8001be4:	08001c05 	.word	0x08001c05
 8001be8:	08001e29 	.word	0x08001e29
 8001bec:	08001e29 	.word	0x08001e29
 8001bf0:	08001e29 	.word	0x08001e29
 8001bf4:	08001d1b 	.word	0x08001d1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b91      	ldr	r3, [pc, #580]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001bfa:	613b      	str	r3, [r7, #16]
       break;
 8001bfc:	e117      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfe:	4b91      	ldr	r3, [pc, #580]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c00:	613b      	str	r3, [r7, #16]
      break;
 8001c02:	e114      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c04:	4b8d      	ldr	r3, [pc, #564]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c0c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d024      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1a:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	099b      	lsrs	r3, r3, #6
 8001c20:	461a      	mov	r2, r3
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001c2a:	f04f 0500 	mov.w	r5, #0
 8001c2e:	ea02 0004 	and.w	r0, r2, r4
 8001c32:	ea03 0105 	and.w	r1, r3, r5
 8001c36:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c38:	fb03 f201 	mul.w	r2, r3, r1
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	fb03 f300 	mul.w	r3, r3, r0
 8001c42:	4413      	add	r3, r2
 8001c44:	4a7f      	ldr	r2, [pc, #508]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001c46:	fba0 0102 	umull	r0, r1, r0, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f7fe fad5 	bl	8000204 <__aeabi_uldivmod>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4613      	mov	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e04c      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c64:	4b75      	ldr	r3, [pc, #468]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c74:	f04f 0100 	mov.w	r1, #0
 8001c78:	ea02 0800 	and.w	r8, r2, r0
 8001c7c:	ea03 0901 	and.w	r9, r3, r1
 8001c80:	4640      	mov	r0, r8
 8001c82:	4649      	mov	r1, r9
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	014b      	lsls	r3, r1, #5
 8001c8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c92:	0142      	lsls	r2, r0, #5
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	ebb0 0008 	subs.w	r0, r0, r8
 8001c9c:	eb61 0109 	sbc.w	r1, r1, r9
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	018b      	lsls	r3, r1, #6
 8001caa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cae:	0182      	lsls	r2, r0, #6
 8001cb0:	1a12      	subs	r2, r2, r0
 8001cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	00d9      	lsls	r1, r3, #3
 8001cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cc4:	00d0      	lsls	r0, r2, #3
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	eb12 0208 	adds.w	r2, r2, r8
 8001cce:	eb43 0309 	adc.w	r3, r3, r9
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	0299      	lsls	r1, r3, #10
 8001cdc:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ce0:	0290      	lsls	r0, r2, #10
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	461a      	mov	r2, r3
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	f7fe fa87 	bl	8000204 <__aeabi_uldivmod>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	0c1b      	lsrs	r3, r3, #16
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	613b      	str	r3, [r7, #16]
      break;
 8001d18:	e089      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d1a:	4948      	ldr	r1, [pc, #288]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d1c:	6849      	ldr	r1, [r1, #4]
 8001d1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d22:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d24:	4945      	ldr	r1, [pc, #276]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d26:	6849      	ldr	r1, [r1, #4]
 8001d28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d2c:	2900      	cmp	r1, #0
 8001d2e:	d024      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d30:	4942      	ldr	r1, [pc, #264]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d32:	6849      	ldr	r1, [r1, #4]
 8001d34:	0989      	lsrs	r1, r1, #6
 8001d36:	4608      	mov	r0, r1
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d40:	f04f 0500 	mov.w	r5, #0
 8001d44:	ea00 0204 	and.w	r2, r0, r4
 8001d48:	ea01 0305 	and.w	r3, r1, r5
 8001d4c:	493d      	ldr	r1, [pc, #244]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d4e:	fb01 f003 	mul.w	r0, r1, r3
 8001d52:	2100      	movs	r1, #0
 8001d54:	fb01 f102 	mul.w	r1, r1, r2
 8001d58:	1844      	adds	r4, r0, r1
 8001d5a:	493a      	ldr	r1, [pc, #232]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001d5c:	fba2 0101 	umull	r0, r1, r2, r1
 8001d60:	1863      	adds	r3, r4, r1
 8001d62:	4619      	mov	r1, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	f7fe fa4a 	bl	8000204 <__aeabi_uldivmod>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4613      	mov	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e04a      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	461a      	mov	r2, r3
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	ea02 0400 	and.w	r4, r2, r0
 8001d92:	ea03 0501 	and.w	r5, r3, r1
 8001d96:	4620      	mov	r0, r4
 8001d98:	4629      	mov	r1, r5
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	014b      	lsls	r3, r1, #5
 8001da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001da8:	0142      	lsls	r2, r0, #5
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	1b00      	subs	r0, r0, r4
 8001db0:	eb61 0105 	sbc.w	r1, r1, r5
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	018b      	lsls	r3, r1, #6
 8001dbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dc2:	0182      	lsls	r2, r0, #6
 8001dc4:	1a12      	subs	r2, r2, r0
 8001dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dca:	f04f 0000 	mov.w	r0, #0
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	00d9      	lsls	r1, r3, #3
 8001dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dd8:	00d0      	lsls	r0, r2, #3
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	1912      	adds	r2, r2, r4
 8001de0:	eb45 0303 	adc.w	r3, r5, r3
 8001de4:	f04f 0000 	mov.w	r0, #0
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	0299      	lsls	r1, r3, #10
 8001dee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001df2:	0290      	lsls	r0, r2, #10
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	f7fe f9fe 	bl	8000204 <__aeabi_uldivmod>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0f1b      	lsrs	r3, r3, #28
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	613b      	str	r3, [r7, #16]
      break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001e2a:	613b      	str	r3, [r7, #16]
      break;
 8001e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e2e:	693b      	ldr	r3, [r7, #16]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	017d7840 	.word	0x017d7840

08001e48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e28d      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8083 	beq.w	8001f6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e68:	4b94      	ldr	r3, [pc, #592]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d019      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e74:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e80:	4b8e      	ldr	r3, [pc, #568]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d112      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9a:	4b88      	ldr	r3, [pc, #544]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	4b84      	ldr	r3, [pc, #528]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d05b      	beq.n	8001f6c <HAL_RCC_OscConfig+0x124>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d157      	bne.n	8001f6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e25a      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x90>
 8001eca:	4b7c      	ldr	r3, [pc, #496]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7b      	ldr	r2, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xcc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0xb4>
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a72      	ldr	r2, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xcc>
 8001efc:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6b      	ldr	r2, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fa48 	bl	80013b0 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fa44 	bl	80013b0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e21f      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b61      	ldr	r3, [pc, #388]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xdc>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff fa34 	bl	80013b0 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fa30 	bl	80013b0 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e20b      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x104>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d06f      	beq.n	800205a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d017      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f86:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d105      	bne.n	8001f9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b44      	ldr	r3, [pc, #272]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x186>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1d3      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4937      	ldr	r1, [pc, #220]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <HAL_RCC_OscConfig+0x278>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7ff f9dd 	bl	80013b0 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f9d9 	bl	80013b0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1b4      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4925      	ldr	r1, [pc, #148]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <HAL_RCC_OscConfig+0x278>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff f9bc 	bl	80013b0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff f9b8 	bl	80013b0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e193      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d036      	beq.n	80020d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_RCC_OscConfig+0x27c>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff f99c 	bl	80013b0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207c:	f7ff f998 	bl	80013b0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e173      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x274>)
 8002090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x234>
 800209a:	e01b      	b.n	80020d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <HAL_RCC_OscConfig+0x27c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7ff f985 	bl	80013b0 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	e00e      	b.n	80020c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020aa:	f7ff f981 	bl	80013b0 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d907      	bls.n	80020c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e15c      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
 80020bc:	40023800 	.word	0x40023800
 80020c0:	42470000 	.word	0x42470000
 80020c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	4b8a      	ldr	r3, [pc, #552]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 80020ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ea      	bne.n	80020aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 8097 	beq.w	8002210 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b83      	ldr	r3, [pc, #524]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10f      	bne.n	8002112 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a7e      	ldr	r2, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210e:	2301      	movs	r3, #1
 8002110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002112:	4b79      	ldr	r3, [pc, #484]	; (80022f8 <HAL_RCC_OscConfig+0x4b0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d118      	bne.n	8002150 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x4b0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a75      	ldr	r2, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x4b0>)
 8002124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212a:	f7ff f941 	bl	80013b0 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002132:	f7ff f93d 	bl	80013b0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e118      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x4b0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d106      	bne.n	8002166 <HAL_RCC_OscConfig+0x31e>
 8002158:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4a65      	ldr	r2, [pc, #404]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	; 0x70
 8002164:	e01c      	b.n	80021a0 <HAL_RCC_OscConfig+0x358>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b05      	cmp	r3, #5
 800216c:	d10c      	bne.n	8002188 <HAL_RCC_OscConfig+0x340>
 800216e:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	4a60      	ldr	r2, [pc, #384]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6713      	str	r3, [r2, #112]	; 0x70
 800217a:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6713      	str	r3, [r2, #112]	; 0x70
 8002186:	e00b      	b.n	80021a0 <HAL_RCC_OscConfig+0x358>
 8002188:	4b5a      	ldr	r3, [pc, #360]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a59      	ldr	r2, [pc, #356]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
 8002194:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800219a:	f023 0304 	bic.w	r3, r3, #4
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff f902 	bl	80013b0 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7ff f8fe 	bl	80013b0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0d7      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c6:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0ee      	beq.n	80021b0 <HAL_RCC_OscConfig+0x368>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f8ec 	bl	80013b0 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff f8e8 	bl	80013b0 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0c1      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1ee      	bne.n	80021dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	4a3a      	ldr	r2, [pc, #232]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80ad 	beq.w	8002374 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b08      	cmp	r3, #8
 8002224:	d060      	beq.n	80022e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d145      	bne.n	80022ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x4b4>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7ff f8bc 	bl	80013b0 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7ff f8b8 	bl	80013b0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e093      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	019b      	lsls	r3, r3, #6
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	3b01      	subs	r3, #1
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	061b      	lsls	r3, r3, #24
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	071b      	lsls	r3, r3, #28
 8002286:	491b      	ldr	r1, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x4b4>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7ff f88d 	bl	80013b0 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229a:	f7ff f889 	bl	80013b0 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e064      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x452>
 80022b8:	e05c      	b.n	8002374 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_OscConfig+0x4b4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff f876 	bl	80013b0 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff f872 	bl	80013b0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e04d      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x480>
 80022e6:	e045      	b.n	8002374 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e040      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_RCC_OscConfig+0x538>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d030      	beq.n	8002370 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d129      	bne.n	8002370 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d122      	bne.n	8002370 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002338:	4293      	cmp	r3, r2
 800233a:	d119      	bne.n	8002370 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	3b01      	subs	r3, #1
 800234a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d10f      	bne.n	8002370 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d107      	bne.n	8002370 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	613b      	str	r3, [r7, #16]
  return result;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2103      	movs	r1, #3
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	401a      	ands	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	61bb      	str	r3, [r7, #24]
  return result;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	bf00      	nop
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	401a      	ands	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002412:	b480      	push	{r7}
 8002414:	b089      	sub	sp, #36	; 0x24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	613b      	str	r3, [r7, #16]
  return result;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2103      	movs	r1, #3
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	401a      	ands	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	61bb      	str	r3, [r7, #24]
  return result;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	431a      	orrs	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002464:	bf00      	nop
 8002466:	3724      	adds	r7, #36	; 0x24
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	613b      	str	r3, [r7, #16]
  return result;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2103      	movs	r1, #3
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	401a      	ands	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	61bb      	str	r3, [r7, #24]
  return result;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	431a      	orrs	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	60da      	str	r2, [r3, #12]
}
 80024c2:	bf00      	nop
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b089      	sub	sp, #36	; 0x24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a1a      	ldr	r2, [r3, #32]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	613b      	str	r3, [r7, #16]
  return result;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	210f      	movs	r1, #15
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	401a      	ands	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	61bb      	str	r3, [r7, #24]
  return result;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	431a      	orrs	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002520:	bf00      	nop
 8002522:	3724      	adds	r7, #36	; 0x24
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	613b      	str	r3, [r7, #16]
  return result;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	210f      	movs	r1, #15
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	61bb      	str	r3, [r7, #24]
  return result;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	431a      	orrs	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002582:	bf00      	nop
 8002584:	3724      	adds	r7, #36	; 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b088      	sub	sp, #32
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	613b      	str	r3, [r7, #16]
  return result;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80025b8:	e050      	b.n	800265c <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2101      	movs	r1, #1
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d042      	beq.n	8002656 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d003      	beq.n	80025e0 <LL_GPIO_Init+0x52>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d10d      	bne.n	80025fc <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	461a      	mov	r2, r3
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff12 	bl	8002412 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	461a      	mov	r2, r3
 80025f4:	69b9      	ldr	r1, [r7, #24]
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fef3 	bl	80023e2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	461a      	mov	r2, r3
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff33 	bl	8002470 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d11a      	bne.n	8002648 <LL_GPIO_Init+0xba>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	60bb      	str	r3, [r7, #8]
  return result;
 800261e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b07      	cmp	r3, #7
 8002628:	d807      	bhi.n	800263a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	461a      	mov	r2, r3
 8002630:	69b9      	ldr	r1, [r7, #24]
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff4b 	bl	80024ce <LL_GPIO_SetAFPin_0_7>
 8002638:	e006      	b.n	8002648 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	461a      	mov	r2, r3
 8002640:	69b9      	ldr	r1, [r7, #24]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ff72 	bl	800252c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	461a      	mov	r2, r3
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fe97 	bl	8002384 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3301      	adds	r3, #1
 800265a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	fa22 f303 	lsr.w	r3, r2, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1a7      	bne.n	80025ba <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <LL_RCC_GetSysClkSource+0x18>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <LL_RCC_GetAHBPrescaler+0x18>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <LL_RCC_GetAPB1Prescaler+0x18>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800

080026e4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <LL_RCC_PLL_GetMainSource+0x18>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800

08002700 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <LL_RCC_PLL_GetN+0x18>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40023800 	.word	0x40023800

0800271c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <LL_RCC_PLL_GetP+0x18>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <LL_RCC_PLL_GetR+0x18>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800

08002754 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <LL_RCC_PLL_GetDivider+0x18>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002778:	f000 f820 	bl	80027bc <RCC_GetSystemClockFreq>
 800277c:	4602      	mov	r2, r0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f85c 	bl	8002844 <RCC_GetHCLKClockFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f86a 	bl	8002870 <RCC_GetPCLK1ClockFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f876 	bl	8002898 <RCC_GetPCLK2ClockFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60da      	str	r2, [r3, #12]
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80027c6:	f7ff ff55 	bl	8002674 <LL_RCC_GetSysClkSource>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d82d      	bhi.n	800282c <RCC_GetSystemClockFreq+0x70>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <RCC_GetSystemClockFreq+0x1c>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	0800282d 	.word	0x0800282d
 80027e0:	0800282d 	.word	0x0800282d
 80027e4:	0800282d 	.word	0x0800282d
 80027e8:	08002813 	.word	0x08002813
 80027ec:	0800282d 	.word	0x0800282d
 80027f0:	0800282d 	.word	0x0800282d
 80027f4:	0800282d 	.word	0x0800282d
 80027f8:	08002819 	.word	0x08002819
 80027fc:	0800282d 	.word	0x0800282d
 8002800:	0800282d 	.word	0x0800282d
 8002804:	0800282d 	.word	0x0800282d
 8002808:	08002823 	.word	0x08002823
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <RCC_GetSystemClockFreq+0x80>)
 800280e:	607b      	str	r3, [r7, #4]
      break;
 8002810:	e00f      	b.n	8002832 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <RCC_GetSystemClockFreq+0x84>)
 8002814:	607b      	str	r3, [r7, #4]
      break;
 8002816:	e00c      	b.n	8002832 <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002818:	2008      	movs	r0, #8
 800281a:	f000 f851 	bl	80028c0 <RCC_PLL_GetFreqDomain_SYS>
 800281e:	6078      	str	r0, [r7, #4]
      break;
 8002820:	e007      	b.n	8002832 <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 8002822:	200c      	movs	r0, #12
 8002824:	f000 f84c 	bl	80028c0 <RCC_PLL_GetFreqDomain_SYS>
 8002828:	6078      	str	r0, [r7, #4]
      break;
 800282a:	e002      	b.n	8002832 <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <RCC_GetSystemClockFreq+0x80>)
 800282e:	607b      	str	r3, [r7, #4]
      break;
 8002830:	bf00      	nop
  }

  return frequency;
 8002832:	687b      	ldr	r3, [r7, #4]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	00f42400 	.word	0x00f42400
 8002840:	017d7840 	.word	0x017d7840

08002844 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800284c:	f7ff ff20 	bl	8002690 <LL_RCC_GetAHBPrescaler>
 8002850:	4603      	mov	r3, r0
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <RCC_GetHCLKClockFreq+0x28>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
 800285c:	461a      	mov	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	40d3      	lsrs	r3, r2
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	08003758 	.word	0x08003758

08002870 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002878:	f7ff ff18 	bl	80026ac <LL_RCC_GetAPB1Prescaler>
 800287c:	4603      	mov	r3, r0
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <RCC_GetPCLK1ClockFreq+0x24>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	461a      	mov	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	40d3      	lsrs	r3, r2
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	08003768 	.word	0x08003768

08002898 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80028a0:	f7ff ff12 	bl	80026c8 <LL_RCC_GetAPB2Prescaler>
 80028a4:	4603      	mov	r3, r0
 80028a6:	0b5b      	lsrs	r3, r3, #13
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <RCC_GetPCLK2ClockFreq+0x24>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	461a      	mov	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	40d3      	lsrs	r3, r2
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	08003768 	.word	0x08003768

080028c0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80028d4:	f7ff ff06 	bl	80026e4 <LL_RCC_PLL_GetMainSource>
 80028d8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e6:	d003      	beq.n	80028f0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80028e8:	e005      	b.n	80028f6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80028ec:	617b      	str	r3, [r7, #20]
      break;
 80028ee:	e005      	b.n	80028fc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 80028f2:	617b      	str	r3, [r7, #20]
      break;
 80028f4:	e002      	b.n	80028fc <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 80028f8:	617b      	str	r3, [r7, #20]
      break;
 80028fa:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d114      	bne.n	800292c <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002902:	f7ff ff27 	bl	8002754 <LL_RCC_PLL_GetDivider>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fbb3 f4f2 	udiv	r4, r3, r2
 800290e:	f7ff fef7 	bl	8002700 <LL_RCC_PLL_GetN>
 8002912:	4603      	mov	r3, r0
 8002914:	fb03 f404 	mul.w	r4, r3, r4
 8002918:	f7ff ff00 	bl	800271c <LL_RCC_PLL_GetP>
 800291c:	4603      	mov	r3, r0
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	3301      	adds	r3, #1
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	fbb4 f3f3 	udiv	r3, r4, r3
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	e011      	b.n	8002950 <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800292c:	f7ff ff12 	bl	8002754 <LL_RCC_PLL_GetDivider>
 8002930:	4602      	mov	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fbb3 f4f2 	udiv	r4, r3, r2
 8002938:	f7ff fee2 	bl	8002700 <LL_RCC_PLL_GetN>
 800293c:	4603      	mov	r3, r0
 800293e:	fb03 f404 	mul.w	r4, r3, r4
 8002942:	f7ff fef9 	bl	8002738 <LL_RCC_PLL_GetR>
 8002946:	4603      	mov	r3, r0
 8002948:	0f1b      	lsrs	r3, r3, #28
 800294a:	fbb4 f3f3 	udiv	r3, r4, r3
 800294e:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002950:	693b      	ldr	r3, [r7, #16]
}
 8002952:	4618      	mov	r0, r3
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}
 800295a:	bf00      	nop
 800295c:	00f42400 	.word	0x00f42400
 8002960:	017d7840 	.word	0x017d7840

08002964 <LL_USART_IsEnabled>:
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_USART_SetStopBitsLength>:
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_USART_SetHWFlowCtrl>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	615a      	str	r2, [r3, #20]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_USART_SetBaudRate>:
{
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029dc:	b09f      	sub	sp, #124	; 0x7c
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6778      	str	r0, [r7, #116]	; 0x74
 80029e2:	6739      	str	r1, [r7, #112]	; 0x70
 80029e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029e6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ee:	f040 80bc 	bne.w	8002b6a <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80029f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f4:	461c      	mov	r4, r3
 80029f6:	f04f 0500 	mov.w	r5, #0
 80029fa:	4622      	mov	r2, r4
 80029fc:	462b      	mov	r3, r5
 80029fe:	eb12 0a02 	adds.w	sl, r2, r2
 8002a02:	eb43 0b03 	adc.w	fp, r3, r3
 8002a06:	4652      	mov	r2, sl
 8002a08:	465b      	mov	r3, fp
 8002a0a:	1912      	adds	r2, r2, r4
 8002a0c:	eb45 0303 	adc.w	r3, r5, r3
 8002a10:	f04f 0000 	mov.w	r0, #0
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	00d9      	lsls	r1, r3, #3
 8002a1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a1e:	00d0      	lsls	r0, r2, #3
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	1911      	adds	r1, r2, r4
 8002a26:	6639      	str	r1, [r7, #96]	; 0x60
 8002a28:	416b      	adcs	r3, r5
 8002a2a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	1891      	adds	r1, r2, r2
 8002a36:	6339      	str	r1, [r7, #48]	; 0x30
 8002a38:	415b      	adcs	r3, r3
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a44:	f7fd fbde 	bl	8000204 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4ba9      	ldr	r3, [pc, #676]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	b29e      	uxth	r6, r3
 8002a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5c:	461c      	mov	r4, r3
 8002a5e:	f04f 0500 	mov.w	r5, #0
 8002a62:	4622      	mov	r2, r4
 8002a64:	462b      	mov	r3, r5
 8002a66:	1891      	adds	r1, r2, r2
 8002a68:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a6a:	415b      	adcs	r3, r3
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a72:	1912      	adds	r2, r2, r4
 8002a74:	eb45 0303 	adc.w	r3, r5, r3
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	00d9      	lsls	r1, r3, #3
 8002a82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a86:	00d0      	lsls	r0, r2, #3
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	1911      	adds	r1, r2, r4
 8002a8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a90:	416b      	adcs	r3, r5
 8002a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a96:	461a      	mov	r2, r3
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	1891      	adds	r1, r2, r2
 8002a9e:	6239      	str	r1, [r7, #32]
 8002aa0:	415b      	adcs	r3, r3
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aa8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002aac:	f7fd fbaa 	bl	8000204 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4b8f      	ldr	r3, [pc, #572]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2164      	movs	r1, #100	; 0x64
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	3332      	adds	r3, #50	; 0x32
 8002ac8:	4a8a      	ldr	r2, [pc, #552]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4433      	add	r3, r6
 8002ade:	b29e      	uxth	r6, r3
 8002ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f04f 0100 	mov.w	r1, #0
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	1894      	adds	r4, r2, r2
 8002aee:	61bc      	str	r4, [r7, #24]
 8002af0:	415b      	adcs	r3, r3
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af8:	1812      	adds	r2, r2, r0
 8002afa:	eb41 0303 	adc.w	r3, r1, r3
 8002afe:	f04f 0400 	mov.w	r4, #0
 8002b02:	f04f 0500 	mov.w	r5, #0
 8002b06:	00dd      	lsls	r5, r3, #3
 8002b08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b0c:	00d4      	lsls	r4, r2, #3
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	1814      	adds	r4, r2, r0
 8002b14:	653c      	str	r4, [r7, #80]	; 0x50
 8002b16:	414b      	adcs	r3, r1
 8002b18:	657b      	str	r3, [r7, #84]	; 0x54
 8002b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	1891      	adds	r1, r2, r2
 8002b24:	6139      	str	r1, [r7, #16]
 8002b26:	415b      	adcs	r3, r3
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b32:	f7fd fb67 	bl	8000204 <__aeabi_uldivmod>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4b6e      	ldr	r3, [pc, #440]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	2164      	movs	r1, #100	; 0x64
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	3332      	adds	r3, #50	; 0x32
 8002b4e:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4433      	add	r3, r6
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b66:	609a      	str	r2, [r3, #8]
}
 8002b68:	e0be      	b.n	8002ce8 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b6c:	461c      	mov	r4, r3
 8002b6e:	f04f 0500 	mov.w	r5, #0
 8002b72:	4622      	mov	r2, r4
 8002b74:	462b      	mov	r3, r5
 8002b76:	eb12 0802 	adds.w	r8, r2, r2
 8002b7a:	eb43 0903 	adc.w	r9, r3, r3
 8002b7e:	4642      	mov	r2, r8
 8002b80:	464b      	mov	r3, r9
 8002b82:	1912      	adds	r2, r2, r4
 8002b84:	eb45 0303 	adc.w	r3, r5, r3
 8002b88:	f04f 0000 	mov.w	r0, #0
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	00d9      	lsls	r1, r3, #3
 8002b92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b96:	00d0      	lsls	r0, r2, #3
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	1911      	adds	r1, r2, r4
 8002b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ba0:	416b      	adcs	r3, r5
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	008b      	lsls	r3, r1, #2
 8002bb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bba:	0082      	lsls	r2, r0, #2
 8002bbc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002bc0:	f7fd fb20 	bl	8000204 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002bca:	fba3 2302 	umull	r2, r3, r3, r2
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	b29e      	uxth	r6, r3
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	1894      	adds	r4, r2, r2
 8002be4:	60bc      	str	r4, [r7, #8]
 8002be6:	415b      	adcs	r3, r3
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bee:	1812      	adds	r2, r2, r0
 8002bf0:	eb41 0303 	adc.w	r3, r1, r3
 8002bf4:	f04f 0400 	mov.w	r4, #0
 8002bf8:	f04f 0500 	mov.w	r5, #0
 8002bfc:	00dd      	lsls	r5, r3, #3
 8002bfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c02:	00d4      	lsls	r4, r2, #3
 8002c04:	4622      	mov	r2, r4
 8002c06:	462b      	mov	r3, r5
 8002c08:	1814      	adds	r4, r2, r0
 8002c0a:	643c      	str	r4, [r7, #64]	; 0x40
 8002c0c:	414b      	adcs	r3, r1
 8002c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c12:	4618      	mov	r0, r3
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	008b      	lsls	r3, r1, #2
 8002c22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c26:	0082      	lsls	r2, r0, #2
 8002c28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c2c:	f7fd faea 	bl	8000204 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002c36:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2164      	movs	r1, #100	; 0x64
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	3332      	adds	r3, #50	; 0x32
 8002c48:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4433      	add	r3, r6
 8002c5a:	b29e      	uxth	r6, r3
 8002c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	1894      	adds	r4, r2, r2
 8002c6a:	603c      	str	r4, [r7, #0]
 8002c6c:	415b      	adcs	r3, r3
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c74:	1812      	adds	r2, r2, r0
 8002c76:	eb41 0303 	adc.w	r3, r1, r3
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	f04f 0500 	mov.w	r5, #0
 8002c82:	00dd      	lsls	r5, r3, #3
 8002c84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c88:	00d4      	lsls	r4, r2, #3
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	462b      	mov	r3, r5
 8002c8e:	1814      	adds	r4, r2, r0
 8002c90:	63bc      	str	r4, [r7, #56]	; 0x38
 8002c92:	414b      	adcs	r3, r1
 8002c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f04f 0100 	mov.w	r1, #0
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	008b      	lsls	r3, r1, #2
 8002ca8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cac:	0082      	lsls	r2, r0, #2
 8002cae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002cb2:	f7fd faa7 	bl	8000204 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	2164      	movs	r1, #100	; 0x64
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	3332      	adds	r3, #50	; 0x32
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <LL_USART_SetBaudRate+0x31c>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4433      	add	r3, r6
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce6:	609a      	str	r2, [r3, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	377c      	adds	r7, #124	; 0x7c
 8002cec:	46bd      	mov	sp, r7
 8002cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf2:	bf00      	nop
 8002cf4:	51eb851f 	.word	0x51eb851f

08002cf8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff fe2a 	bl	8002964 <LL_USART_IsEnabled>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d15e      	bne.n	8002dd4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d1e:	f023 030c 	bic.w	r3, r3, #12
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	6851      	ldr	r1, [r2, #4]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	68d2      	ldr	r2, [r2, #12]
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	6912      	ldr	r2, [r2, #16]
 8002d30:	4311      	orrs	r1, r2
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	6992      	ldr	r2, [r2, #24]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fe21 	bl	800298c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff fe2e 	bl	80029b2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fd08 	bl	8002770 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <LL_USART_Init+0xe8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d102      	bne.n	8002d6e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	e021      	b.n	8002db2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <LL_USART_Init+0xec>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d102      	bne.n	8002d7c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	e01a      	b.n	8002db2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <LL_USART_Init+0xf0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d102      	bne.n	8002d8a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	e013      	b.n	8002db2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a17      	ldr	r2, [pc, #92]	; (8002dec <LL_USART_Init+0xf4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d102      	bne.n	8002d98 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	e00c      	b.n	8002db2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <LL_USART_Init+0xf8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d102      	bne.n	8002da6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	e005      	b.n	8002db2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <LL_USART_Init+0xfc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69b9      	ldr	r1, [r7, #24]
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fe02 	bl	80029d8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40011000 	.word	0x40011000
 8002de4:	40004400 	.word	0x40004400
 8002de8:	40004800 	.word	0x40004800
 8002dec:	40011400 	.word	0x40011400
 8002df0:	40004c00 	.word	0x40004c00
 8002df4:	40005000 	.word	0x40005000

08002df8 <LL_USART_IsActiveFlag_TXE>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b80      	cmp	r3, #128	; 0x80
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	605a      	str	r2, [r3, #4]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <initSerialLine>:
void clearBuffer();
unsigned short update_crc(unsigned char *data_blk_ptr, unsigned short data_blk_size);
void writePacket(SerialLine *serialLine, uint8_t packet[], int length);

void initSerialLine(SerialLine *serialLine, uint8_t id, uint8_t* dataStructurePtr, size_t dataStructureSize, USART_TypeDef* usart)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	72fb      	strb	r3, [r7, #11]
	(serialLine)->id = id;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	7afa      	ldrb	r2, [r7, #11]
 8002e50:	701a      	strb	r2, [r3, #0]
	(serialLine)->dataStructurePtr = dataStructurePtr;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	609a      	str	r2, [r3, #8]
	(serialLine)->dataStructSize = dataStructureSize;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
	(serialLine)->usart = usart;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
	(serialLine)->nominalPacketCnt = 0;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
	(serialLine)->state = HEADER_1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	615a      	str	r2, [r3, #20]
	(serialLine)->trialCnt = 0;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	(serialLine)->nominalTransmitCnt = 0;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <pushPacket>:

int pushPacket(SerialLine *serialLine, uint8_t packet[], int length)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
	for(int i=0; i<length; i++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e013      	b.n	8002ec6 <pushPacket+0x3a>
	{
		serialLine->test = i;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		if(pushByte(serialLine, packet[i]))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	4413      	add	r3, r2
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f811 	bl	8002ed8 <pushByte>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <pushPacket+0x34>
		{
			return 1;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e007      	b.n	8002ed0 <pushPacket+0x44>
	for(int i=0; i<length; i++)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dbe7      	blt.n	8002e9e <pushPacket+0x12>
		}
	}

	return 0;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <pushByte>:

int pushByte(SerialLine *serialLine, uint8_t byte)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
	switch (serialLine->state)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	2b0a      	cmp	r3, #10
 8002eea:	f200 81c8 	bhi.w	800327e <pushByte+0x3a6>
 8002eee:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <pushByte+0x1c>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	08002f4d 	.word	0x08002f4d
 8002efc:	08002f73 	.word	0x08002f73
 8002f00:	08002f91 	.word	0x08002f91
 8002f04:	08002faf 	.word	0x08002faf
 8002f08:	08002fc1 	.word	0x08002fc1
 8002f0c:	08002fd3 	.word	0x08002fd3
 8002f10:	08003015 	.word	0x08003015
 8002f14:	08003039 	.word	0x08003039
 8002f18:	0800305f 	.word	0x0800305f
 8002f1c:	08003071 	.word	0x08003071
	{
	case HEADER_1:
	{
		clearBuffer(serialLine);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fabd 	bl	80034a0 <clearBuffer>
		if (byte == 0xFF)
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	2bff      	cmp	r3, #255	; 0xff
 8002f2a:	f040 81a3 	bne.w	8003274 <pushByte+0x39c>
		{
			bufferPush(serialLine, 0xFF);
 8002f2e:	21ff      	movs	r1, #255	; 0xff
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f9d2 	bl	80032da <bufferPush>
			serialLine->trialCnt++;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
			serialLine->state = HEADER_2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	615a      	str	r2, [r3, #20]
		}
		break;
 8002f4a:	e193      	b.n	8003274 <pushByte+0x39c>
	}
	case HEADER_2:
	{
		if (byte == 0xFF)
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	2bff      	cmp	r3, #255	; 0xff
 8002f50:	d107      	bne.n	8002f62 <pushByte+0x8a>
		{
			bufferPush(serialLine, 0xFF);
 8002f52:	21ff      	movs	r1, #255	; 0xff
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f9c0 	bl	80032da <bufferPush>
			serialLine->state = HEADER_3;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	615a      	str	r2, [r3, #20]
		else
		{
			serialLine->failByte = byte;
			serialLine->state = HEADER_1;
		}
		break;
 8002f60:	e18d      	b.n	800327e <pushByte+0x3a6>
			serialLine->failByte = byte;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
			serialLine->state = HEADER_1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
		break;
 8002f70:	e185      	b.n	800327e <pushByte+0x3a6>
	}
	case HEADER_3:
	{
		if (byte == 0xFD)
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	2bfd      	cmp	r3, #253	; 0xfd
 8002f76:	d107      	bne.n	8002f88 <pushByte+0xb0>
		{
			bufferPush(serialLine, 0xFD);
 8002f78:	21fd      	movs	r1, #253	; 0xfd
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9ad 	bl	80032da <bufferPush>
			serialLine->state = RESERVED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2203      	movs	r2, #3
 8002f84:	615a      	str	r2, [r3, #20]
		}
		else
		{
			serialLine->state = HEADER_1;
		}
		break;
 8002f86:	e17a      	b.n	800327e <pushByte+0x3a6>
			serialLine->state = HEADER_1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
		break;
 8002f8e:	e176      	b.n	800327e <pushByte+0x3a6>
	}
	case RESERVED:
	{
		if (byte == 0x00)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <pushByte+0xce>
		{
			bufferPush(serialLine, 0x00);
 8002f96:	2100      	movs	r1, #0
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f99e 	bl	80032da <bufferPush>
			serialLine->state = RX_STATE_ID;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	615a      	str	r2, [r3, #20]
		}
		else
		{
			serialLine->state = HEADER_1;
		}
		break;
 8002fa4:	e16b      	b.n	800327e <pushByte+0x3a6>
			serialLine->state = HEADER_1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
		break;
 8002fac:	e167      	b.n	800327e <pushByte+0x3a6>
	}
	case RX_STATE_ID:
	{
		bufferPush(serialLine, byte);
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f991 	bl	80032da <bufferPush>
		serialLine->state = LENGTH_1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2205      	movs	r2, #5
 8002fbc:	615a      	str	r2, [r3, #20]
		break;
 8002fbe:	e15e      	b.n	800327e <pushByte+0x3a6>
	}
	case LENGTH_1:
	{
		bufferPush(serialLine, byte);
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f988 	bl	80032da <bufferPush>
		serialLine->state = LENGTH_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2206      	movs	r2, #6
 8002fce:	615a      	str	r2, [r3, #20]
		break;
 8002fd0:	e155      	b.n	800327e <pushByte+0x3a6>
	}
	case LENGTH_2:
	{
		bufferPush(serialLine, byte);
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f97f 	bl	80032da <bufferPush>
		serialLine->length = 256 * serialLine->packetBuffer[6] + serialLine->packetBuffer[5];
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7f9b      	ldrb	r3, [r3, #30]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	7f52      	ldrb	r2, [r2, #29]
 8002fe6:	441a      	add	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		if(serialLine->length < 0 ||RX_BUFFER_SIZE-10 < serialLine->length)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db05      	blt.n	8003004 <pushByte+0x12c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002ffe:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8003002:	dd03      	ble.n	800300c <pushByte+0x134>
		{
			serialLine->state = HEADER_1;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	615a      	str	r2, [r3, #20]
		}
		else
		{
			serialLine->state = INSTRUCTION;
		}
		break;
 800300a:	e138      	b.n	800327e <pushByte+0x3a6>
			serialLine->state = INSTRUCTION;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2207      	movs	r2, #7
 8003010:	615a      	str	r2, [r3, #20]
		break;
 8003012:	e134      	b.n	800327e <pushByte+0x3a6>
	}
	case INSTRUCTION:
	{
		bufferPush(serialLine, byte);
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f95e 	bl	80032da <bufferPush>
		if(serialLine->length == 3) serialLine->state = CRC_1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003024:	2b03      	cmp	r3, #3
 8003026:	d103      	bne.n	8003030 <pushByte+0x158>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2209      	movs	r2, #9
 800302c:	615a      	str	r2, [r3, #20]
		else serialLine->state = PARAMETER;
		break;
 800302e:	e126      	b.n	800327e <pushByte+0x3a6>
		else serialLine->state = PARAMETER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2208      	movs	r2, #8
 8003034:	615a      	str	r2, [r3, #20]
		break;
 8003036:	e122      	b.n	800327e <pushByte+0x3a6>
	}
	case PARAMETER:
	{
		bufferPush(serialLine, byte);
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	4619      	mov	r1, r3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f94c 	bl	80032da <bufferPush>
		if (serialLine->packetBufferSize > (serialLine->length + 4)) serialLine->state = CRC_1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800304e:	3304      	adds	r3, #4
 8003050:	429a      	cmp	r2, r3
 8003052:	f340 8111 	ble.w	8003278 <pushByte+0x3a0>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2209      	movs	r2, #9
 800305a:	615a      	str	r2, [r3, #20]
		break;
 800305c:	e10c      	b.n	8003278 <pushByte+0x3a0>
	}
	case CRC_1:
	{
		bufferPush(serialLine, byte);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f939 	bl	80032da <bufferPush>
		serialLine->state = CRC_2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	220a      	movs	r2, #10
 800306c:	615a      	str	r2, [r3, #20]
		break;
 800306e:	e106      	b.n	800327e <pushByte+0x3a6>
	}
	case CRC_2:
	{
		bufferPush(serialLine, byte);
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f930 	bl	80032da <bufferPush>

		serialLine->actualCRC = serialLine->packetBuffer[serialLine->packetBufferSize-2] | (serialLine->packetBuffer[serialLine->packetBufferSize-1]<<8);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003080:	3b02      	subs	r3, #2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	7e1b      	ldrb	r3, [r3, #24]
 8003088:	b21a      	sxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003090:	3b01      	subs	r3, #1
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	440b      	add	r3, r1
 8003096:	7e1b      	ldrb	r3, [r3, #24]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	b21b      	sxth	r3, r3
 800309c:	4313      	orrs	r3, r2
 800309e:	b21b      	sxth	r3, r3
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
		serialLine->expectedCRC = update_crc(serialLine->packetBuffer, serialLine->packetBufferSize-2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f103 0218 	add.w	r2, r3, #24
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b02      	subs	r3, #2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f000 f9a1 	bl	8003404 <update_crc>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
		serialLine->state = HEADER_1;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	615a      	str	r2, [r3, #20]

		if(serialLine->expectedCRC == serialLine->actualCRC)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8b3 214c 	ldrh.w	r2, [r3, #332]	; 0x14c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 80030de:	429a      	cmp	r2, r3
 80030e0:	f040 80cc 	bne.w	800327c <pushByte+0x3a4>
		{
			serialLine->nominalPacketCnt++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	611a      	str	r2, [r3, #16]
			if(serialLine->id == serialLine->packetBuffer[4])
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7f1b      	ldrb	r3, [r3, #28]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	f040 80b9 	bne.w	800326e <pushByte+0x396>
			{
				uint8_t instruction = serialLine->packetBuffer[7];
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7fdb      	ldrb	r3, [r3, #31]
 8003100:	75fb      	strb	r3, [r7, #23]

				switch(instruction)
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	2bde      	cmp	r3, #222	; 0xde
 8003106:	f040 80b3 	bne.w	8003270 <pushByte+0x398>
				{
				case 0xDE:
				{
					injectValue(serialLine, &serialLine->packetBuffer[8], serialLine->packetBufferSize-10);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f103 0120 	add.w	r1, r3, #32
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003116:	3b0a      	subs	r3, #10
 8003118:	461a      	mov	r2, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f8fc 	bl	8003318 <injectValue>

					int packetLength=0;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]

					serialLine->packet[packetLength++] = 0xFF;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	61fa      	str	r2, [r7, #28]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	22ff      	movs	r2, #255	; 0xff
 8003130:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0xFF;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	61fa      	str	r2, [r7, #28]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	22ff      	movs	r2, #255	; 0xff
 8003140:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0xFD;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	22fd      	movs	r2, #253	; 0xfd
 8003150:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0x00;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	61fa      	str	r2, [r7, #28]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	2200      	movs	r2, #0
 8003160:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = serialLine->id;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	61fa      	str	r2, [r7, #28]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	7811      	ldrb	r1, [r2, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	460a      	mov	r2, r1
 8003174:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0;	//length placeholder. valid value is set by setLength()
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	61fa      	str	r2, [r7, #28]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	2200      	movs	r2, #0
 8003184:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0;	//length placeholder. valid value is set by setLength()
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	61fa      	str	r2, [r7, #28]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	2200      	movs	r2, #0
 8003194:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0X55;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	61fa      	str	r2, [r7, #28]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	2255      	movs	r2, #85	; 0x55
 80031a4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = 0;//error
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	61fa      	str	r2, [r7, #28]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					for(int i=0; i<serialLine->dataStructSize; i++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	e00f      	b.n	80031de <pushByte+0x306>
					{
						serialLine->packet[packetLength++] = *(serialLine->dataStructurePtr + i);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	441a      	add	r2, r3
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	61f9      	str	r1, [r7, #28]
 80031cc:	7811      	ldrb	r1, [r2, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	460a      	mov	r2, r1
 80031d4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					for(int i=0; i<serialLine->dataStructSize; i++)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	3301      	adds	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d8ea      	bhi.n	80031be <pushByte+0x2e6>
					}

					//set length
					int length = packetLength - 5;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3b05      	subs	r3, #5
 80031ec:	613b      	str	r3, [r7, #16]
					serialLine->packet[5] = (length& 0xff);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
					serialLine->packet[6] = ((length>>8) & 0xff);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	121b      	asrs	r3, r3, #8
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162

					//attach CRC
					unsigned short crc = update_crc(serialLine->packet, packetLength);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	b292      	uxth	r2, r2
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f8f7 	bl	8003404 <update_crc>
 8003216:	4603      	mov	r3, r0
 8003218:	81fb      	strh	r3, [r7, #14]
					serialLine->packet[packetLength++] = crc& 0xff;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	1c5a      	adds	r2, r3, #1
 800321e:	61fa      	str	r2, [r7, #28]
 8003220:	89fa      	ldrh	r2, [r7, #14]
 8003222:	b2d1      	uxtb	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	460a      	mov	r2, r1
 800322a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->packet[packetLength++] = (crc>>8) & 0xff;
 800322e:	89fb      	ldrh	r3, [r7, #14]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	b299      	uxth	r1, r3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	b2c9      	uxtb	r1, r1
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4413      	add	r3, r2
 8003240:	460a      	mov	r2, r1
 8003242:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
					serialLine->nominalTransmitCnt++;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
					writePacket(serialLine, serialLine->packet, packetLength);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f814 	bl	800328c <writePacket>
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8003264:	2104      	movs	r1, #4
 8003266:	4808      	ldr	r0, [pc, #32]	; (8003288 <pushByte+0x3b0>)
 8003268:	f7fe fb41 	bl	80018ee <HAL_GPIO_TogglePin>
					break;
 800326c:	e000      	b.n	8003270 <pushByte+0x398>
				}
				}
			}
 800326e:	bf00      	nop

			return 1;
 8003270:	2301      	movs	r3, #1
 8003272:	e005      	b.n	8003280 <pushByte+0x3a8>
		break;
 8003274:	bf00      	nop
 8003276:	e002      	b.n	800327e <pushByte+0x3a6>
		break;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <pushByte+0x3a6>
		}
		break;
 800327c:	bf00      	nop
	}
	}

	return 0;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40020c00 	.word	0x40020c00

0800328c <writePacket>:

void writePacket(SerialLine *serialLine, uint8_t packet[], int length)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
	for(int i=0; i<length; i++)
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	e014      	b.n	80032c8 <writePacket+0x3c>
	{
		while(!LL_USART_IsActiveFlag_TXE(serialLine->usart));
 800329e:	bf00      	nop
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff fda7 	bl	8002df8 <LL_USART_IsActiveFlag_TXE>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f7      	beq.n	80032a0 <writePacket+0x14>
		LL_USART_TransmitData8(serialLine->usart, packet[i]);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68d8      	ldr	r0, [r3, #12]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f7ff fdae 	bl	8002e1e <LL_USART_TransmitData8>
	for(int i=0; i<length; i++)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	3301      	adds	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	dbe6      	blt.n	800329e <writePacket+0x12>
	}
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <bufferPush>:

void bufferPush(SerialLine *serialLine, uint8_t byte)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70fb      	strb	r3, [r7, #3]
	if(serialLine->packetBufferSize > RX_BUFFER_SIZE-2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80032ec:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 80032f0:	dd02      	ble.n	80032f8 <bufferPush+0x1e>
	{
		clearBuffer(serialLine);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8d4 	bl	80034a0 <clearBuffer>
	}

	serialLine->packetBuffer[serialLine->packetBufferSize++] = byte;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	f8c2 1154 	str.w	r1, [r2, #340]	; 0x154
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	761a      	strb	r2, [r3, #24]
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <injectValue>:

void injectValue(SerialLine *serialLine, uint8_t parameter[], int length)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b090      	sub	sp, #64	; 0x40
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
	int state = ADDRESS_1;
 8003324:	2300      	movs	r3, #0
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint8_t address1;
	int address, size, valueByteIndex = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t valueByteArray[16];

	uint8_t byte;
	for(int i=0; i<length; i++)
 800332c:	2300      	movs	r3, #0
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003330:	e05c      	b.n	80033ec <injectValue+0xd4>
	{
		byte = parameter[i];
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4413      	add	r3, r2
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003340:	2b03      	cmp	r3, #3
 8003342:	d850      	bhi.n	80033e6 <injectValue+0xce>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <injectValue+0x34>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	0800336b 	.word	0x0800336b
 8003354:	0800337f 	.word	0x0800337f
 8003358:	08003391 	.word	0x08003391

		switch(state)
		{
		case ADDRESS_1:
		{
			address1 = byte;
 800335c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003360:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			state = ADDRESS_2;
 8003364:	2301      	movs	r3, #1
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 8003368:	e03d      	b.n	80033e6 <injectValue+0xce>
		}
		case ADDRESS_2:
		{
			address = address1 | (byte<<8);
 800336a:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800336e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003372:	021b      	lsls	r3, r3, #8
 8003374:	4313      	orrs	r3, r2
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
			state = SIZE;
 8003378:	2302      	movs	r3, #2
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 800337c:	e033      	b.n	80033e6 <injectValue+0xce>
		}
		case SIZE:
		{
			size = byte;
 800337e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
			if(size > 16) return;
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	2b10      	cmp	r3, #16
 8003388:	dc35      	bgt.n	80033f6 <injectValue+0xde>
			state = VALUE;
 800338a:	2303      	movs	r3, #3
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
 800338e:	e02a      	b.n	80033e6 <injectValue+0xce>
		}
		case VALUE:
		{
			valueByteArray[valueByteIndex++] = byte;
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003396:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800339a:	4413      	add	r3, r2
 800339c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80033a0:	f803 2c2c 	strb.w	r2, [r3, #-44]
			if(valueByteIndex == size)
 80033a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d11b      	bne.n	80033e4 <injectValue+0xcc>
			{
				if((uint8_t*)serialLine->dataStructurePtr + address == NULL || (uint8_t*)serialLine->dataStructurePtr + address + size == NULL) return;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b2:	4413      	add	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <injectValue+0xe2>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	440b      	add	r3, r1
 80033c2:	4413      	add	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d018      	beq.n	80033fa <injectValue+0xe2>
				//dataChange.address = address;
				//for(int i=0; i<size ; i++) dataChange.data.push_back(valueByteArray[i]);
				//slaveSerialLine->addDataChange(dataChange);

				//printf("injecting to %d\n",address);
				memcpy((uint8_t*)serialLine->dataStructurePtr + address, valueByteArray, size);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	4413      	add	r3, r2
 80033d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d2:	f107 0114 	add.w	r1, r7, #20
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f894 	bl	8003504 <memcpy>
				valueByteIndex = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
				state = ADDRESS_1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			break;
 80033e4:	bf00      	nop
	for(int i=0; i<length; i++)
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	3301      	adds	r3, #1
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	db9e      	blt.n	8003332 <injectValue+0x1a>
 80033f4:	e002      	b.n	80033fc <injectValue+0xe4>
			if(size > 16) return;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <injectValue+0xe4>
				if((uint8_t*)serialLine->dataStructurePtr + address == NULL || (uint8_t*)serialLine->dataStructurePtr + address + size == NULL) return;
 80033fa:	bf00      	nop
		}
		}
	}
}
 80033fc:	3740      	adds	r7, #64	; 0x40
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop

08003404 <update_crc>:
{
	free(serialLine);
}

unsigned short update_crc(unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800340a:	af00      	add	r7, sp, #0
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	6018      	str	r0, [r3, #0]
 8003410:	460a      	mov	r2, r1
 8003412:	1cbb      	adds	r3, r7, #2
 8003414:	801a      	strh	r2, [r3, #0]
	unsigned short crc_accum = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	unsigned short i, j;
	unsigned short crc_table[256] = {
 800341c:	f107 0308 	add.w	r3, r7, #8
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <update_crc+0x98>)
 8003422:	4618      	mov	r0, r3
 8003424:	4611      	mov	r1, r2
 8003426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800342a:	461a      	mov	r2, r3
 800342c:	f000 f86a 	bl	8003504 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++)
 8003430:	2300      	movs	r3, #0
 8003432:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 8003436:	e023      	b.n	8003480 <update_crc+0x7c>
	{
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8003438:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	b29a      	uxth	r2, r3
 8003440:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8003444:	1d39      	adds	r1, r7, #4
 8003446:	6809      	ldr	r1, [r1, #0]
 8003448:	440b      	add	r3, r1
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	4053      	eors	r3, r2
 8003450:	b29b      	uxth	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f8a7 320a 	strh.w	r3, [r7, #522]	; 0x20a
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8003458:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	b21a      	sxth	r2, r3
 8003460:	f8b7 120a 	ldrh.w	r1, [r7, #522]	; 0x20a
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800346c:	b21b      	sxth	r3, r3
 800346e:	4053      	eors	r3, r2
 8003470:	b21b      	sxth	r3, r3
 8003472:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	for(j = 0; j < data_blk_size; j++)
 8003476:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800347a:	3301      	adds	r3, #1
 800347c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 8003480:	1cbb      	adds	r3, r7, #2
 8003482:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d3d5      	bcc.n	8003438 <update_crc+0x34>
	}

	return crc_accum;
 800348c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
}
 8003490:	4618      	mov	r0, r3
 8003492:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	08003548 	.word	0x08003548

080034a0 <clearBuffer>:

void clearBuffer(SerialLine *serialLine)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	serialLine->packetBufferSize = 0;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <__libc_init_array>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4d0d      	ldr	r5, [pc, #52]	; (80034f4 <__libc_init_array+0x38>)
 80034c0:	4c0d      	ldr	r4, [pc, #52]	; (80034f8 <__libc_init_array+0x3c>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	2600      	movs	r6, #0
 80034c8:	42a6      	cmp	r6, r4
 80034ca:	d109      	bne.n	80034e0 <__libc_init_array+0x24>
 80034cc:	4d0b      	ldr	r5, [pc, #44]	; (80034fc <__libc_init_array+0x40>)
 80034ce:	4c0c      	ldr	r4, [pc, #48]	; (8003500 <__libc_init_array+0x44>)
 80034d0:	f000 f82e 	bl	8003530 <_init>
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	2600      	movs	r6, #0
 80034da:	42a6      	cmp	r6, r4
 80034dc:	d105      	bne.n	80034ea <__libc_init_array+0x2e>
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e4:	4798      	blx	r3
 80034e6:	3601      	adds	r6, #1
 80034e8:	e7ee      	b.n	80034c8 <__libc_init_array+0xc>
 80034ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ee:	4798      	blx	r3
 80034f0:	3601      	adds	r6, #1
 80034f2:	e7f2      	b.n	80034da <__libc_init_array+0x1e>
 80034f4:	08003780 	.word	0x08003780
 80034f8:	08003780 	.word	0x08003780
 80034fc:	08003780 	.word	0x08003780
 8003500:	08003784 	.word	0x08003784

08003504 <memcpy>:
 8003504:	440a      	add	r2, r1
 8003506:	4291      	cmp	r1, r2
 8003508:	f100 33ff 	add.w	r3, r0, #4294967295
 800350c:	d100      	bne.n	8003510 <memcpy+0xc>
 800350e:	4770      	bx	lr
 8003510:	b510      	push	{r4, lr}
 8003512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800351a:	4291      	cmp	r1, r2
 800351c:	d1f9      	bne.n	8003512 <memcpy+0xe>
 800351e:	bd10      	pop	{r4, pc}

08003520 <memset>:
 8003520:	4402      	add	r2, r0
 8003522:	4603      	mov	r3, r0
 8003524:	4293      	cmp	r3, r2
 8003526:	d100      	bne.n	800352a <memset+0xa>
 8003528:	4770      	bx	lr
 800352a:	f803 1b01 	strb.w	r1, [r3], #1
 800352e:	e7f9      	b.n	8003524 <memset+0x4>

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
